Azure AZ-204 - Microsoft Certified: Azure Developer Associate

https://learn.microsoft.com/en-us/credentials/certifications/resources/study-guides/az-204

Skills at a glance
--------------------
	-> Develop Azure compute solutions (25–30%)
	-> Develop for Azure storage (15–20%)
	-> Implement Azure security (15–20%)
	-> Monitor, troubleshoot, and optimize Azure solutions (10–15%)
	-> Connect to and consume Azure services and third-party services (20–25%)
	
	
One of the important requirement for the exam is to understand interacting with Azure using Powershell and Bash CLI.

We will talk about Powershell in this video.

What is Powershell?
-------------------
	-> Powershell is a task automation and configuration management framework. 
	-> It is built on the .Net Framework initially and works well with Windows platform, Microsoft products, but in the latest release after version 7, Powershell core introduced which is built based on .Net core. This become cross-platform.
	-> It provides command-line interface and using scripting we can automate the repetetive/administrative tasks, integrates well with AD, Exchange Server, Azure.
	-> It has cmdlets which are specialized .NET classes to perform specific operations.
		Eg: Get-Process - gets the list of running processes. 
	-> To work with Azure SDKs, we need minimum of powershell-7.

Get/Download Powershell:
---------------------------
	-> https://github.com/PowerShell/PowerShell	->https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.4#installing-the-msi-package
	
Downloaded the Powershell (PowerShell-7.4.3-win-x64) from above link and installed.
When searching for Powershell from Start menu, we can see two options 
		-> Powershell 7 (x64) - This is the one we installed now. - $PSVersionTable.PSVersion
		-> Windows Powershell - This is older version 5.1 - $PSVersionTable.PSVersion
		
	Powershell command to determine the powershell version:
					
					"$PSVersionTable.PSVersion"
		
Okay no we have Powershell installed, but this alone is not enough to interact with Azure, we need one more thing - Azure SDK.

Lets learn more about Azure SDK.

First of all what is SDK?
--------------------------
			SDK - Software Development Kit - which consists of necessary tools, libraries, documentation, code samples to build applications using that. It can also have testing tools to perform unit, functional, performance, compatibility testing.
			
			Examples:
			---------
				=> .Net SDK - For developing applications on the .Net framework
				=> Java SDK(JDK) - For developing Java applications
				=> Android SDK - For developing android applications
				=> iOS SDK - For developing iOS applications
				
			So SDKs provide necessary components to build, test, deploy applications efficiently for a specific environment.	
				
How to check if Azure SDK installed in system using powershell?
----------------------------------------------------------------
		-> Get-Module -Name Az -ListAvailable 
				-> returns nothing, currently nothing installed.
		-> simply running "Get-Module" - returns below 3 records in the same format.
		
-----------------------------------------------------------------------------------------------------
ModuleType Version    PreRelease Name                                ExportedCommands
---------- -------    ---------- ----                                ----------------
Manifest   7.0.0.0               Microsoft.PowerShell.Management     {Add-Content, Clear-Content...}
Manifest   7.0.0.0               Microsoft.PowerShell.Utility        {Add-Member, Add-Type…}
Script     2.3.5                 PSReadLine                          {Get-PSReadLineKeyHandler…}
-----------------------------------------------------------------------------------------------------

I can run this - 

		"Get-Module -Name Microsoft.PowerShell.Management -ListAvailable"

to get below record;

-----------------------------------------------------------------------------------------------------
ModuleType Version    PreRelease Name                                PSEdition ExportedCommands
---------- -------    ---------- ----                                --------- ----------------
Manifest   7.0.0.0               Microsoft.PowerShell.Management     Core      {Add-Content, Clear-Content…}
-----------------------------------------------------------------------------------------------------

Okay, as Azure SDK is not installed on my system, how do we install it?

https://learn.microsoft.com/en-us/powershell/azure/install-azure-powershell?view=azps-12.1.0&viewFallbackFrom=azps-6.6.0

Use the Install-Module cmdlet to install the Az PowerShell module:

		"Install-Module -Name Az -Repository PSGallery -Force"
		
After installing, running this command - Get-Module -Name Az -ListAvailable
-----------------------------------------------------------------------------------------------------
	    Directory: C:\Users\Gowthaman\OneDrive\ドキュメント\PowerShell\Modules

ModuleType Version    PreRelease Name                                PSEdition ExportedCommands
---------- -------    ---------- ----                                --------- ----------------
Script     12.1.0                Az                                  Core,Desk	
-----------------------------------------------------------------------------------------------------

Now we have Latest version of Powershell and Azure SDK installed on our system, still one more thing to be done to start using Azure Commands to interact with Azure.
					
					-> Connecting to Azure Account
					
	How to connect to azure account from powershell?
	------------------------------------------------
		"Connect-AzAccount"
		
	On running this command, it opened up a browser to connect azure account, but for me after giving mail id, but it suggested another command to authenticate;

		"Connect-AzAccount -DeviceCode"
		
	Then it gave a url to hit and authentication code to be entered. 
					Yes its Party time - it is connecteddddddddddddddd!!!!!
					
Subscription name 		Tenant
----------------- 		------
Pay-As-You-Go     Default Directory				
		
Note: When we run Azure Cloud shell for interacting with Azure resources, then we do not need to update powershell, Azure Sdks because that is managed by Microsoft it is always kept upto date.

Azure Virtual Machines:
-----------------------
	Note: VMs are not part of the AZ-204 exam anymore, but we will still spend sometime learning this technology as its basic, essential and interesting.

When we click on "Create a resource" -> it is going to list down number of categories of services that are offered in Azure like Compute, Storage, Networking, Databases, AI + Machine Learning, Analysis...

There is also see more -> on click of this, it is going to list of more services and we could notice under each category there are 10+ services offered like in compute (VMs, Web Apps, Functions, Logic Apps...).

This session we are going to see about "Compute" Services under which we will start off with Virtual machines.
	Compute service basically allows us to run any workloads on azure. 
		-> This could be deploying applications using VMs/Web App Service ....
		
	"Virtual Machines are basically a virtualized machine of a single physical server and it could be used by different customer/tenants but fortunately the VMs within same physical server cannot be interfered with each other and tightly locked"	
		
	Create a Virtual Machine using Portal
	-------------------------------------
	Subscription:
	--------------
			It always needs a subscription to which this resource has to be billed.
			-> Subscription is basically the billing unit within azure, through which our Credit Card charged, company gets charged.
			-> A account can have multiple subscriptions like for different department/projects to charge respectively.
	 Resource Group
	----------------
			-> It is basically logical grouping of the resources, like a folder structure do not have limitation based on geo.
			-> Resource like VM can have only resource group. 
			
	VM name:
	---------
		We can have any name, it does not need to be unique across geo, but it has to be unique for the region we are going to create the resource in.
			-> "azurevm" - is valid if we do not have another VM with same name in the same region.
			
	Region:
	--------
		When we create a resource, we can select the region in which data center we want the resource to be created, to be noted based on this the resource gets charged.
			-> Ideally we should choose the region which is closer to our users.
				
						"US - can have several regions
						Europe - can have several
						Asia pacific - can have several" 
				
				Likewise, it goes on....
			
	Availability Options:
	----------------------
		-> By default the VMs are very highly available, but there could be situation where Microsoft has to apply patches/updates to the servers and that could cause chances for VMs outage for few mins in a month or two.
		-> As well as there could be some unexpected outage chances due to power supply, network issues accross data center/region.
			
	So for this there are 3 levels of availability options provided:
	----------------------------------------------------------------
		Availability Sets
		------------------
			-> When we have this selected, the VM gets deployed to one server and also get replicated to another VM which is not in same physical server/same rack, but within the same data center it tries to put those as far it could, so that any faults in one server/rack affects another.
				-> Still it do not address the issues at building level/data center level.

		Availability Zone:
		------------------
			-> So based on the region selected, it will list zones available to replicate the application/resource within the selected region.
					For eg:
					-------
						West US(3), Central India, Some of the UK region has 3 zones, but south india do not have one. 
				-> This helps to address any issues even at the data center/building level.
				
		Virtual Machine Scale Sets:
		----------------------------
			-> This would replicate the resources across fault domains and zones at scale within the single region.
			-> So based on the demand it will scale the VMs to meet the demand.
			
			

